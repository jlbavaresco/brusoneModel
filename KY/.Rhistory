## armazenando todas as linhas da consulta em um dataframe
dados <- fetch(rs, n = -1)   # extract all rows
#dbCommit(con)
#dbDisconnect(con)
## convertendo a data que vem em formato string para Date
#dados$DATA <- as.Date(dados$DATA,"%Y-%m-%d")
#função que recebe uma data no yyyy-mm-dd e retorna o dia em juliano
dataToJuliano<-function(dia){
d <- dia
data <- as.Date(d, "%Y-%m-%d")
j <- as.numeric(format(data,"%j"))
return(j)
}
dados$DATA <- dataToJuliano(dados$DATA)
head(dados)
attach(dados)
## plot do numero de lesoes
plot(DATA,TOTAL_PONTOS, ylab="Número de Lesões Média", xlab="Tempo (J)",type='h',main="Progresso médio das lesões ao longo do tempo")
##gerando grafico com as todas folhas e total de lesoes
sql <- "select data, total_pontos as total_pontos from folhas
join grupos on folhas.grupo = grupos.id
where grupos.nome = 'Precoce' order by data"
rs <- dbSendQuery(con, statement = sql)
## armazenando todas as linhas da consulta em um dataframe
df <- fetch(rs, n = -1)   # extract all rows
df$DATA <- dataToJuliano(df$DATA)
head(df)
attach(df)
#t <- c(7,14,21,28,35,42)
#l <- c(5,13,30,52,65,68)
library(plotrix)
library(lattice)
plot(DATA,TOTAL_PONTOS,xlab="Tempo (J)",ylab="Lesões ",main="Lesões das folhas")
mb1 <- with(df, tapply(TOTAL_PONTOS, DATA, mean))
sdb1 <- with(df, tapply(TOTAL_PONTOS, DATA, sd))
nb1 <- with(df, tapply(TOTAL_PONTOS, DATA, length))
ciwb1 <- qt(.975, nb1) * sdb1 / sqrt(nb1)
t <- unique(DATA)
m <- nls(TOTAL_PONTOS~SSlogis(DATA, Asym, xmid, scal), df)
t1<- seq(min(t),max(t), len = 100)
summary(m)
#plotCI(t,mb1,ciwb1,xlab="Data em Juliano",ylab="Pontos",main="Modelo 1")
p.m <- predict(m, data.frame(DATA =t1))
lines(t1,p.m,col=2,lty=2)
##lesÃµes medias das folhas
sql <- "select data, avg(total_pontos) as total_pontos from folhas
join grupos on folhas.grupo = grupos.id
where grupos.nome = 'Precoce' group by data order by data"
rs <- dbSendQuery(con, statement = sql)
## armazenando todas as linhas da consulta em um dataframe
df <- fetch(rs, n = -1)   # extract all rows
df$DATA <- dataToJuliano(df$DATA)
head(df)
attach(df)
#t <- c(7,14,21,28,35,42)
#l <- c(5,13,30,52,65,68)
library(plotrix)
library(lattice)
plot(DATA,TOTAL_PONTOS,xlab="Tempo (J)",ylab="Lesões ",main="Lesões Médias das folhas")
mb1 <- with(df, tapply(TOTAL_PONTOS, DATA, mean))
sdb1 <- with(df, tapply(TOTAL_PONTOS, DATA, sd))
nb1 <- with(df, tapply(TOTAL_PONTOS, DATA, length))
ciwb1 <- qt(.975, nb1) * sdb1 / sqrt(nb1)
t <- unique(DATA)
m <- nls(TOTAL_PONTOS~SSlogis(DATA, Asym, xmid, scal), df)
t1<- seq(min(t),max(t), len = 100)
summary(m)
#plotCI(t,mb1,ciwb1,xlab="Data em Juliano",ylab="Pontos",main="Modelo 1")
p.m <- predict(m, data.frame(DATA =t1))
lines(t1,p.m,col=2,lty=2)
## instalação rJava e RJDBC
#executar no console sudo R CMD javareconf JAVA_HOME=/home/jorge/Java/jdk1.7.0_25
## JAVA_HOME é o caminho da instalação da JDK do Java em seu ambiente
## ou adiconar ao path do so C:\Java\jdk1.7.0_45\jre\bin\server
#Depois instalar rJava e RJDBC
#install.packages('rJava', dependencies = TRUE)
#install.packages("RJDBC", dependencies = TRUE)
rm()
library(rJava)
library(RJDBC)
driver <- "D:/Jorge/GoogleDrive/UPF/Mestrado/Trabalho/modelo/hsqldb.jar"
classeDriver <- "org.hsqldb.jdbcDriver"
# definindo o r para criar duas paginas e colunas
par(mfrow=c(2,2))
## neste diretorio /home/jorge/JavaProjects/ImageS/ devem existir dois arquivos
## que são a base de dados em si: folhas.properties e folhas.script
## o nome do banco de dados é folhas
#url linux
#urlJDBC <- "jdbc:hsqldb:file:/home/jorge/JavaProjects/ImageS/folhas;shutdown=true"
#url windows
urlJDBC <- "jdbc:hsqldb:file:D:/Jorge/GoogleDrive/UPF/Mestrado/PPGCA/MCA004 - Trabalho individual de pesquisa/modelo/folhas;shutdown=true"
drv <- JDBC(classeDriver,driver, "`")
con <- dbConnect(drv, urlJDBC, uid="SA", pwd="")
## Listagem de todas as tabelas do banco
#dbListTables(conn)
## Lendo toda a tabela folhas e armazenando em um data frame
#d <- dbReadTable(con, "folhas")
## execução de consulta no banco
## Filtro no grupo Precoce ou Primeira Epoca
sql <- "select data, avg(total_pontos) as total_pontos from folhas
join grupos on folhas.grupo = grupos.id
where grupos.nome = 'Conquista 1\u00aa Epoca 17 01 2013' group by data order by data"
rs <- dbSendQuery(con, statement = sql)
## armazenando todas as linhas da consulta em um dataframe
dados <- fetch(rs, n = -1)   # extract all rows
#dbCommit(con)
#dbDisconnect(con)
## convertendo a data que vem em formato string para Date
#dados$DATA <- as.Date(dados$DATA,"%Y-%m-%d")
#função que recebe uma data no yyyy-mm-dd e retorna o dia em juliano
dataToJuliano<-function(dia){
d <- dia
data <- as.Date(d, "%Y-%m-%d")
j <- as.numeric(format(data,"%j"))
return(j)
}
dados$DATA <- dataToJuliano(dados$DATA)
head(dados)
attach(dados)
## plot do numero de lesoes
plot(DATA,TOTAL_PONTOS, ylab="Número de Lesões Média", xlab="Tempo (J)",type='h',main="Progresso médio das lesões ao longo do tempo")
##gerando grafico com as todas folhas e total de lesoes
sql <- "select data, total_pontos as total_pontos from folhas
join grupos on folhas.grupo = grupos.id
where grupos.nome = 'Precoce' order by data"
rs <- dbSendQuery(con, statement = sql)
## armazenando todas as linhas da consulta em um dataframe
df <- fetch(rs, n = -1)   # extract all rows
df$DATA <- dataToJuliano(df$DATA)
head(df)
attach(df)
#t <- c(7,14,21,28,35,42)
#l <- c(5,13,30,52,65,68)
library(plotrix)
library(lattice)
plot(DATA,TOTAL_PONTOS,xlab="Tempo (J)",ylab="Lesões ",main="Lesões das folhas")
mb1 <- with(df, tapply(TOTAL_PONTOS, DATA, mean))
sdb1 <- with(df, tapply(TOTAL_PONTOS, DATA, sd))
nb1 <- with(df, tapply(TOTAL_PONTOS, DATA, length))
ciwb1 <- qt(.975, nb1) * sdb1 / sqrt(nb1)
t <- unique(DATA)
m <- nls(TOTAL_PONTOS~SSlogis(DATA, Asym, xmid, scal), df)
t1<- seq(min(t),max(t), len = 100)
summary(m)
#plotCI(t,mb1,ciwb1,xlab="Data em Juliano",ylab="Pontos",main="Modelo 1")
p.m <- predict(m, data.frame(DATA =t1))
lines(t1,p.m,col=2,lty=2)
##lesÃµes medias das folhas
sql <- "select data, avg(total_pontos) as total_pontos from folhas
join grupos on folhas.grupo = grupos.id
where grupos.nome = 'Precoce' group by data order by data"
rs <- dbSendQuery(con, statement = sql)
## armazenando todas as linhas da consulta em um dataframe
df <- fetch(rs, n = -1)   # extract all rows
df$DATA <- dataToJuliano(df$DATA)
head(df)
attach(df)
#t <- c(7,14,21,28,35,42)
#l <- c(5,13,30,52,65,68)
library(plotrix)
library(lattice)
plot(DATA,TOTAL_PONTOS,xlab="Tempo (J)",ylab="Lesões ",main="Lesões Médias das folhas")
mb1 <- with(df, tapply(TOTAL_PONTOS, DATA, mean))
sdb1 <- with(df, tapply(TOTAL_PONTOS, DATA, sd))
nb1 <- with(df, tapply(TOTAL_PONTOS, DATA, length))
ciwb1 <- qt(.975, nb1) * sdb1 / sqrt(nb1)
t <- unique(DATA)
m <- nls(TOTAL_PONTOS~SSlogis(DATA, Asym, xmid, scal), df)
t1<- seq(min(t),max(t), len = 100)
summary(m)
#plotCI(t,mb1,ciwb1,xlab="Data em Juliano",ylab="Pontos",main="Modelo 1")
p.m <- predict(m, data.frame(DATA =t1))
lines(t1,p.m,col=2,lty=2)
View(dados)
## instalação rJava e RJDBC
#executar no console sudo R CMD javareconf JAVA_HOME=/home/jorge/Java/jdk1.7.0_25
## JAVA_HOME é o caminho da instalação da JDK do Java em seu ambiente
## ou adiconar ao path do so C:\Java\jdk1.7.0_45\jre\bin\server
#Depois instalar rJava e RJDBC
#install.packages('rJava', dependencies = TRUE)
#install.packages("RJDBC", dependencies = TRUE)
rm()
library(rJava)
library(RJDBC)
driver <- "D:/Jorge/GoogleDrive/UPF/Mestrado/Trabalho/modelo/hsqldb.jar"
classeDriver <- "org.hsqldb.jdbcDriver"
# definindo o r para criar duas paginas e colunas
par(mfrow=c(2,2))
## neste diretorio /home/jorge/JavaProjects/ImageS/ devem existir dois arquivos
## que são a base de dados em si: folhas.properties e folhas.script
## o nome do banco de dados é folhas
#url linux
#urlJDBC <- "jdbc:hsqldb:file:/home/jorge/JavaProjects/ImageS/folhas;shutdown=true"
#url windows
urlJDBC <- "jdbc:hsqldb:file:D:/Jorge/GoogleDrive/UPF/Mestrado/PPGCA/MCA004 - Trabalho individual de pesquisa/modelo/folhas;shutdown=true"
drv <- JDBC(classeDriver,driver, "`")
con <- dbConnect(drv, urlJDBC, uid="SA", pwd="")
## Listagem de todas as tabelas do banco
#dbListTables(conn)
## Lendo toda a tabela folhas e armazenando em um data frame
#d <- dbReadTable(con, "folhas")
## execução de consulta no banco
## Filtro no grupo Precoce ou Primeira Epoca
sql <- "select data, avg(total_pontos) as total_pontos from folhas
join grupos on folhas.grupo = grupos.id
where grupos.nome = 'Conquista 08/02/2013' group by data order by data"
rs <- dbSendQuery(con, statement = sql)
## armazenando todas as linhas da consulta em um dataframe
dados <- fetch(rs, n = -1)   # extract all rows
#dbCommit(con)
#dbDisconnect(con)
## convertendo a data que vem em formato string para Date
#dados$DATA <- as.Date(dados$DATA,"%Y-%m-%d")
#função que recebe uma data no yyyy-mm-dd e retorna o dia em juliano
dataToJuliano<-function(dia){
d <- dia
data <- as.Date(d, "%Y-%m-%d")
j <- as.numeric(format(data,"%j"))
return(j)
}
dados$DATA <- dataToJuliano(dados$DATA)
head(dados)
attach(dados)
## plot do numero de lesoes
plot(DATA,TOTAL_PONTOS, ylab="Número de Lesões Média", xlab="Tempo (J)",type='h',main="Progresso médio das lesões ao longo do tempo")
##gerando grafico com as todas folhas e total de lesoes
sql <- "select data, total_pontos as total_pontos from folhas
join grupos on folhas.grupo = grupos.id
where grupos.nome = 'Precoce' order by data"
rs <- dbSendQuery(con, statement = sql)
## armazenando todas as linhas da consulta em um dataframe
df <- fetch(rs, n = -1)   # extract all rows
df$DATA <- dataToJuliano(df$DATA)
head(df)
attach(df)
#t <- c(7,14,21,28,35,42)
#l <- c(5,13,30,52,65,68)
library(plotrix)
library(lattice)
plot(DATA,TOTAL_PONTOS,xlab="Tempo (J)",ylab="Lesões ",main="Lesões das folhas")
mb1 <- with(df, tapply(TOTAL_PONTOS, DATA, mean))
sdb1 <- with(df, tapply(TOTAL_PONTOS, DATA, sd))
nb1 <- with(df, tapply(TOTAL_PONTOS, DATA, length))
ciwb1 <- qt(.975, nb1) * sdb1 / sqrt(nb1)
t <- unique(DATA)
m <- nls(TOTAL_PONTOS~SSlogis(DATA, Asym, xmid, scal), df)
t1<- seq(min(t),max(t), len = 100)
summary(m)
#plotCI(t,mb1,ciwb1,xlab="Data em Juliano",ylab="Pontos",main="Modelo 1")
p.m <- predict(m, data.frame(DATA =t1))
lines(t1,p.m,col=2,lty=2)
##lesÃµes medias das folhas
sql <- "select data, avg(total_pontos) as total_pontos from folhas
join grupos on folhas.grupo = grupos.id
where grupos.nome = 'Precoce' group by data order by data"
rs <- dbSendQuery(con, statement = sql)
## armazenando todas as linhas da consulta em um dataframe
df <- fetch(rs, n = -1)   # extract all rows
df$DATA <- dataToJuliano(df$DATA)
head(df)
attach(df)
#t <- c(7,14,21,28,35,42)
#l <- c(5,13,30,52,65,68)
library(plotrix)
library(lattice)
plot(DATA,TOTAL_PONTOS,xlab="Tempo (J)",ylab="Lesões ",main="Lesões Médias das folhas")
mb1 <- with(df, tapply(TOTAL_PONTOS, DATA, mean))
sdb1 <- with(df, tapply(TOTAL_PONTOS, DATA, sd))
nb1 <- with(df, tapply(TOTAL_PONTOS, DATA, length))
ciwb1 <- qt(.975, nb1) * sdb1 / sqrt(nb1)
t <- unique(DATA)
m <- nls(TOTAL_PONTOS~SSlogis(DATA, Asym, xmid, scal), df)
t1<- seq(min(t),max(t), len = 100)
summary(m)
#plotCI(t,mb1,ciwb1,xlab="Data em Juliano",ylab="Pontos",main="Modelo 1")
p.m <- predict(m, data.frame(DATA =t1))
lines(t1,p.m,col=2,lty=2)
## instalação rJava e RJDBC
#executar no console sudo R CMD javareconf JAVA_HOME=/home/jorge/Java/jdk1.7.0_25
## JAVA_HOME é o caminho da instalação da JDK do Java em seu ambiente
## ou adiconar ao path do so C:\Java\jdk1.7.0_45\jre\bin\server
#Depois instalar rJava e RJDBC
#install.packages('rJava', dependencies = TRUE)
#install.packages("RJDBC", dependencies = TRUE)
rm()
library(rJava)
library(RJDBC)
driver <- "D:/Jorge/GoogleDrive/UPF/Mestrado/Trabalho/modelo/hsqldb.jar"
classeDriver <- "org.hsqldb.jdbcDriver"
# definindo o r para criar duas paginas e colunas
par(mfrow=c(2,2))
## neste diretorio /home/jorge/JavaProjects/ImageS/ devem existir dois arquivos
## que são a base de dados em si: folhas.properties e folhas.script
## o nome do banco de dados é folhas
#url linux
#urlJDBC <- "jdbc:hsqldb:file:/home/jorge/JavaProjects/ImageS/folhas;shutdown=true"
#url windows
urlJDBC <- "jdbc:hsqldb:file:D:/Jorge/GoogleDrive/UPF/Mestrado/PPGCA/MCA004 - Trabalho individual de pesquisa/modelo/folhas;shutdown=true"
drv <- JDBC(classeDriver,driver, "`")
con <- dbConnect(drv, urlJDBC, uid="SA", pwd="")
## Listagem de todas as tabelas do banco
#dbListTables(conn)
## Lendo toda a tabela folhas e armazenando em um data frame
#d <- dbReadTable(con, "folhas")
## execução de consulta no banco
## Filtro no grupo Precoce ou Primeira Epoca
sql <- "select data, avg(total_pontos) as total_pontos from folhas
join grupos on folhas.grupo = grupos.id
where grupos.nome = 'Conquista' group by data order by data"
rs <- dbSendQuery(con, statement = sql)
## armazenando todas as linhas da consulta em um dataframe
dados <- fetch(rs, n = -1)   # extract all rows
#dbCommit(con)
#dbDisconnect(con)
## convertendo a data que vem em formato string para Date
#dados$DATA <- as.Date(dados$DATA,"%Y-%m-%d")
#função que recebe uma data no yyyy-mm-dd e retorna o dia em juliano
dataToJuliano<-function(dia){
d <- dia
data <- as.Date(d, "%Y-%m-%d")
j <- as.numeric(format(data,"%j"))
return(j)
}
dados$DATA <- dataToJuliano(dados$DATA)
head(dados)
attach(dados)
## plot do numero de lesoes
plot(DATA,TOTAL_PONTOS, ylab="Número de Lesões Média", xlab="Tempo (J)",type='h',main="Progresso médio das lesões ao longo do tempo")
##gerando grafico com as todas folhas e total de lesoes
sql <- "select data, total_pontos as total_pontos from folhas
join grupos on folhas.grupo = grupos.id
where grupos.nome = 'Precoce' order by data"
rs <- dbSendQuery(con, statement = sql)
## armazenando todas as linhas da consulta em um dataframe
df <- fetch(rs, n = -1)   # extract all rows
df$DATA <- dataToJuliano(df$DATA)
head(df)
attach(df)
#t <- c(7,14,21,28,35,42)
#l <- c(5,13,30,52,65,68)
library(plotrix)
library(lattice)
plot(DATA,TOTAL_PONTOS,xlab="Tempo (J)",ylab="Lesões ",main="Lesões das folhas")
mb1 <- with(df, tapply(TOTAL_PONTOS, DATA, mean))
sdb1 <- with(df, tapply(TOTAL_PONTOS, DATA, sd))
nb1 <- with(df, tapply(TOTAL_PONTOS, DATA, length))
ciwb1 <- qt(.975, nb1) * sdb1 / sqrt(nb1)
t <- unique(DATA)
m <- nls(TOTAL_PONTOS~SSlogis(DATA, Asym, xmid, scal), df)
t1<- seq(min(t),max(t), len = 100)
summary(m)
#plotCI(t,mb1,ciwb1,xlab="Data em Juliano",ylab="Pontos",main="Modelo 1")
p.m <- predict(m, data.frame(DATA =t1))
lines(t1,p.m,col=2,lty=2)
##lesÃµes medias das folhas
sql <- "select data, avg(total_pontos) as total_pontos from folhas
join grupos on folhas.grupo = grupos.id
where grupos.nome = 'Precoce' group by data order by data"
rs <- dbSendQuery(con, statement = sql)
## armazenando todas as linhas da consulta em um dataframe
df <- fetch(rs, n = -1)   # extract all rows
df$DATA <- dataToJuliano(df$DATA)
head(df)
attach(df)
#t <- c(7,14,21,28,35,42)
#l <- c(5,13,30,52,65,68)
library(plotrix)
library(lattice)
plot(DATA,TOTAL_PONTOS,xlab="Tempo (J)",ylab="Lesões ",main="Lesões Médias das folhas")
mb1 <- with(df, tapply(TOTAL_PONTOS, DATA, mean))
sdb1 <- with(df, tapply(TOTAL_PONTOS, DATA, sd))
nb1 <- with(df, tapply(TOTAL_PONTOS, DATA, length))
ciwb1 <- qt(.975, nb1) * sdb1 / sqrt(nb1)
t <- unique(DATA)
m <- nls(TOTAL_PONTOS~SSlogis(DATA, Asym, xmid, scal), df)
t1<- seq(min(t),max(t), len = 100)
summary(m)
#plotCI(t,mb1,ciwb1,xlab="Data em Juliano",ylab="Pontos",main="Modelo 1")
p.m <- predict(m, data.frame(DATA =t1))
lines(t1,p.m,col=2,lty=2)
library("graphics", lib.loc="C:/Program Files/R/R-3.2.0/library")
install.packages("shiny")
install.packages("ff")
setwd('D:/Jorge/GoogleDrive/UPF/Mestrado/PPGCA/MCA022 - Modelagem e Simula??o Computacional')
## Faz a leitura do arquivo externo e cria uma tabela com os dados
options(show.signif.stars=FALSE)
options(digits=8)
options(decimals=3)
dados<-read.table("acidez.txt",header=T)
attach(dados)
dados
#####################################################################
###########
## Graus de liberdade
#####################################################################
###########
g.l<-length(tempo)-ncol(dados)
g.l
#####################################################################
###########
##Regress?o Linear Simples
#####################################################################
###########
## Estima os par?metros do modelo
rl1<-lm(ph ~ tempo, data = dados)
summary(rl1)
## Faz a an?lise de vari?ncia da regress?o
anova(rl1)
## Define as dimenss?es do gr?fico
windows(width = 9, height = 5)
## Faz o gr?fico da regress?o
plot(tempo,ph, col= 1, cex.main=0.75, font.main=1, font.axis=1,
cex.axis=0.75, cex.lab=0.75, font.lab=1,xlab="tempo",
ylab="Acidez",main="Regress?o Linear:Intervalo de Confian?a
para y-estimado")
yest<- cbind(rl1$fitted.values)
yest
dados$yest<-yest
yres<-cbind(rl1$residuals)
yres
dados$yres<-yres
dados
lines(tempo,yest,col=2, lwd=1)
## Matriz de vari?ncia e covari?ncia
vcov(rl1)
## Intervalo de confian?a para os par?metros: Library(alr3)-.95 ? o default
# O pacote alr3 acompanha o livro - Applied Linear Regression, Third Edition,
# by Sanford Weisberg, Copyright 2005, John Wiley and Sons, ISBN
# 0-471-66379-4
# Detalhes sobre o livro podem ser obtidos na
# url:http://www.stat.umn.edu/alr/
setwd('D:/Jorge/GoogleDrive/UPF/Mestrado/PPGCA/MCA022 - Modelagem e Simula??o Computacional')
## Faz a leitura do arquivo externo e cria uma tabela com os dados
options(show.signif.stars=FALSE)
options(digits=8)
options(decimals=3)
dados<-read.table("acidez.txt",header=T)
attach(dados)
dados
#####################################################################
###########
## Graus de liberdade
#####################################################################
###########
g.l<-length(tempo)-ncol(dados)
g.l
#####################################################################
###########
##Regress?o Linear Simples
#####################################################################
###########
limites<-c(0,5)
par(mfrow=c(2,1), mar=c(5.1,4.1,4.1,2.1))
tempo <- 1:10
y <-  0.05 + (0.25 * tempo) + 0.13
y
plot(y~tempo, main="Bovino",ylim=limites)
tempo <- 1:10
y <-  0.05 + (0.40 * tempo) + 0.10
y
plot(y~tempo, main="Frango",ylim=limites)
citation()
citation("neuralNet")
install.packages("neuralnet")
library("neuralnet")
citation(neuralnet())
citation(neuralnet
)
citation("neuralnet")
setwd("F:/Jorge/Downloads/KY_data")
df <- read.csv("Data.csv",header = T)
df <- read.csv("Data.csv",header = T)
df <- read.csv("Data.csv",header = T)
View(df)
df <- read.table("Data.csv",header = T)
df <- read.table("Data.csv",header = T)
df <- read.table("KPAH.csv",header = T, sep = "\t")
setwd("F:/Jorge/Downloads/KY_data")
df <- read.table("KPAH.csv",header = T, sep = "\t")
df <- read.table("KPAH.csv",header = T)
df <- read.table("KPAH.csv",header = T)
df <- read.table("KPAH.csv",header = T, sep="\t")
View(df)
df <- read.table("KLOZ.csv",header = T, sep="\t")
View(df)
boxplot(df)
boxplot(df$precip)
boxplot(df$temp)
boxplot(df$Temp)
boxplot(df$Precip)
boxplot(df$Rh)
boxplot(df$RH)
df <- read.table("KJKL.csv",header = T, sep="\t")
View(df)
df <- read.table("KHOP.csv",header = T, sep="\t")
View(df)
df <- read.table("KFTK.csv",header = T, sep="\t")
View(df)
df <- read.table("KLOU.csv",header = T, sep="\t")
View(df)
df <- read.table("KOWB.csv",header = T, sep="\t")
df <- read.table("KFFT.csv",header = T, sep="\t")
df <- read.table("KFFT.csv",header = T, sep="\t")
View(df)
df <- read.table("KEHR.csv",header = T, sep="\t")
df <- read.table("KSME.csv",header = T, sep="\t")
df <- read.table("KSME.csv",header = T, sep="\t")
df <- read.table("K1A6.csv",header = T, sep="\t")
df <- read.table("KEKQ.csv",header = T, sep="\t")
df <- read.table("KBWG.csv",header = T, sep="\t")
df <- read.table("KLEX.csv",header = T, sep="\t")
df <- read.table("KSDF.csv",header = T, sep="\t")
